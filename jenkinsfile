pipeline {
    agent { label 'JDK-17' }
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
    triggers {
        pollSCM('* * * * *')
    }
    tools {
        jdk 'JDK-17'
    }
    stages {
        stage('vcs') {
            steps {
                git url: 'https://github.com/dilip309/spring-petclinic.git',
                    branch: 'develop'
            }
        }
        stage('build and package') {
            steps {
                 rtMavenDeployer (
                    id: "SPC_DEPLOYER",
                    serverId: "MY_FREE_JFROG",
                    releaseRepo: 'dj-libs-snapshot-local',
                    snapshotRepo: 'dj-libs-snapshot-local'
                )
                rtMavenRun (
                    tool: 'MAVEN_3.9', // Tool name from Jenkins configuration
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "SPC_DEPLOYER"
                    //,
                    //buildName: "${JOB_NAME}",
                    //buildNumber: "${BUILD_ID}"
                )
                rtPublishBuildInfo (
                    serverId: "MY_FREE_JFROG"
                )
            }
        }
        stage('SonarQube analysis') {
            steps {

                // performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
                withSonarQubeEnv('SONAR_CLOUD') {
                // requires SonarQube Scanner for Maven 3.2+
                    sh 'mvn clean package sonar:sonar -Dsonar.organization=firstprojectjuly23 -Dsonar.token=f7aff651d63632c452620894fb39336fd34660dd -Dsonar.projectKey=springpetclinic'
                }
            }
        }
        stage('reporting') {
            steps {
                archiveArtifacts artifacts: '**/target/spring-petclinic-*.jar'
                junit testResults: '**/surefire-reports/TEST-*.xml'
            }
        }
    }
    post {
        success{
            mail subject: "${JOB_NAME}: has completed with success", 
            body: "your project is effective \n Buils url ${BUILD_URL}",
            to: 'dilip309@gmail.com'
        }
        failure{
            mail subject: "${JOB_NAME}: has completed with failed", 
            body: "your project is defective \n Buils url ${BUILD_URL}",
            to: 'dilip309@gmail.com'
    }

    }
}